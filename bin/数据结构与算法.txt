数据结构与算法：
一维：
1）数组：每次申请数组，计算机在内存中开辟一段连续地址。
	查找的时间复杂度为O(1), 插入删除时间复杂度O(n)。	
           
2）链表：查找的复杂度为O(n), 插入删除的效率为O(1)。
应用：LRU缓存——最近最少使用，由Hashmap和双向链表构成。

3）跳表：当链表有序的时候进行加速的数据结构，跳表对标平衡二叉树和二分查找，插入/删除/搜索都是O(logn)。
应用：Redis
	Q：如何提高链表线性查找的效率？
	A：增加多级索引（升维）

4）栈：先入后出，添加删除皆为O(1)，查询为O(n)（可以外面加hashmap加速）。
stack可用数组模拟，自己写一些api。栈的底层实现是vector（vector跟ArrayList的区别是vector是线程安全的，实现了serializable接口），工程用deque即可。
 API：empty(); peek(); pop(); push(E item); search(Object o).

5）队列：先入先出，添加删除皆为O(1)。
在java中，queue是一个interface，常用实现类有LinkedList和PriorityQueue，关于线程安全的实现类有ConcurrentQueue和LinkedBlockingDeque等等。
API: add(e); remove(); element();  ——>有异常抛出异常
       offer(e); poll(); peek();   ——>有异常返回特殊值

6）Deque：双端队列。是接口。
API：addFrist(); removeFirst(); getFirst(); addLast(); removeLast(); getLast();
          offerFirst(e); pollFirst(); peekFirst(); offerLast(e); pollLast(); peekLast();

7) PriorityQueue : 优先队列，插入O(1), 取出O(logN) 按照元素的优先级取出。
 优先队列的底层实现多样且复杂：heap，二叉搜索树，treap…… 
API: add(e); clear(); Comparator<? super e> comparator(); contains(Object o);
      iterator() ……
用comparator定义比较器，确定优先级。

8）哈希表：通过哈希函数把要存储的值映射到一个下标。好的哈希函数会使存储比较分散，不发生碰撞。发生哈希碰撞就拉出一个链表，当链表长度超过八时，变成红黑树存储。我们认为哈希表的平均查找/删除/添加复杂度为O(1)。最坏情况会退化成链表，复杂度为O(n)。
java中 Map：键值对，键不重复；
	Set：不重复元素的集合。

二维：
 	树：跟图最大的差别是看有没有环。用递归操作。

9）BST：左子树<根<右子树。大部分操作时间复杂度都是O(logN)。
10）heap：可以迅速找到一堆数中最大或是最小值。工程里用priorityqueue就行。
API: find-max O(1); delete-max O(logN); 
二叉堆：是一颗完全树；树中任意节点的值总>=子节点的值。
二叉堆一般通过数组实现，假设第一个元素索引为0，那么索引为i的左孩子的索引是（2*i+1），索引为i的右孩子的索引为（2*i+2）
Insert：新元素先插到数组尾部，然后依次向上调整整个堆的结构。
Delete：把堆尾元素复制到堆顶，size--，然后向下维护这个堆。

11）图：点（入度，出度）边（有向，无向）
表示方式：邻接矩阵或邻接表。
常见算法：dfs，bfs (比树多了visited()集合，是个set()).

搜索：
1）深度优先
#Python
visited = set() 

def dfs(node, visited):
   if node in visited: # terminator
   	# already visited 
   	return 

	visited.add(node) 

	# process current node here. 
	...
	for next_node in node.children(): 
		if next_node not in visited: 
			dfs(next_node, visited)
#Java
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> allResults = new ArrayList<>();
        if(root==null){
            return allResults;
        }
        travel(root,0,allResults);
        return allResults;
    }


    private void travel(TreeNode root,int level,List<List<Integer>> results){
        if(results.size()==level){
            results.add(new ArrayList<>());
        }
        results.get(level).add(root.val);
        if(root.left!=null){
            travel(root.left,level+1,results);
        }
        if(root.right!=null){
            travel(root.right,level+1,results);
        }
    }

2）广度优先
# Python
def BFS(graph, start, end):
    visited = set()
	queue = [] 
	queue.append([start]) 
	while queue: 
		node = queue.pop() 
		visited.add(node)
		process(node) 
		nodes = generate_related_nodes(node) 
		queue.push(nodes)
	# other processing work 
	…
#Java
public class TreeNode {
   int val;
   TreeNode left;
   TreeNode right;

   TreeNode(int x) {
       val = x;
   }
}

public List<List<Integer>> levelOrder(TreeNode root) {
   List<List<Integer>> allResults = new ArrayList<>();
   if (root == null) {
       return allResults;
   }
   Queue<TreeNode> nodes = new LinkedList<>();
   nodes.add(root);
   while (!nodes.isEmpty()) {
       int size = nodes.size();
       List<Integer> results = new ArrayList<>();
       for (int i = 0; i < size; i++) {
           TreeNode node = nodes.poll();
           results.add(node.val);
           if (node.left != null) {
               nodes.add(node.left);
           }
           if (node.right != null) {
               nodes.add(node.right);
           }
       }
       allResults.add(results);
   }
   return allResults;
}

3）Greedy贪心算法：每一步都选择当前状态下最优。贪心算法对每个子问题的解决方案都做出选择不能回退，动态规划则会保留以前的运算结果，并对当前进行选择，有回退功能。
    一旦一个问题可以通过贪心算法解决，那贪心算法一般是解决这个问题的最好方法，贪心法有高效性，其所求答案比较接近最优结果。

4）二分查找：
使用二分查找的前提条件：i. 目标函数单调性
			       ii. 存在上下界
			       iii. 能够通过索引访问
# Python
left, right = 0, len(array) - 1 
while left <= right: 
	  mid = (left + right) / 2 
	  if array[mid] == target: 
		    # find the target!! 
		    break or return result 
	  elif array[mid] < target: 
		    left = mid + 1 
	  else: 
		    right = mid - 1
// Java
public int binarySearch(int[] array, int target) {
    int left = 0, right = array.length - 1, mid;
while (left <= right) {
mid = (right - left) / 2 + left;
if (array[mid] == target) { return mid; }
 else if (array[mid] > target) { right = mid - 1; }
 else { left = mid + 1; }
}
return -1;
}
 
5）字典树：用于统计和排序大量字符串，常被搜索引擎用于文本词频统计。从根节点到某一节点路径上所有的字符连在一起，为该节点对应的字符串。
# Python
class Trie(object):
 
	def __init__(self): 
		self.root = {} 
		self.end_of_word = "#"
	def insert(self, word): 
		node = self.root 
		for char in word: 
			node = node.setdefault(char, {}) 
		node[self.end_of_word] = self.end_of_word
	def search(self, word): 
		node = self.root 
		for char in word: 
			if char not in node: 
				return False 
			node = node[char] 
		return self.end_of_word in node
	def startsWith(self, prefix): 
		node = self.root 
		for char in prefix: 
			if char not in node: 
				return False 
			node = node[char] 
		return True
//Java
class Trie {
    private boolean isEnd;
    private Trie[] next;
    /** Initialize your data structure here. */
    public Trie() {
        isEnd = false;
        next = new Trie[26];
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        if (word == null || word.length() == 0) return;
        Trie curr = this;
        char[] words = word.toCharArray();
        for (int i = 0;i < words.length;i++) {
            int n = words[i] - 'a';
            if (curr.next[n] == null) curr.next[n] = new Trie();
            curr = curr.next[n];
        }
        curr.isEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        Trie node = searchPrefix(word);
        return node != null && node.isEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        Trie node = searchPrefix(prefix);
        return node != null;
    }

    private Trie searchPrefix(String word) {
        Trie node = this;
        char[] words = word.toCharArray();
        for (int i = 0;i < words.length;i++) {
            node = node.next[words[i] - 'a'];
            if (node == null) return null;
        }
        return node;
    }
}


6）并查集：适用场景——组团配对问题。
基本操作：i.makeSet(s): 建立一个新的并查集，包含s个单元素集合。
	      ii.unionSet(x,y): 把x和y所在的集合合并，要求x和y所在的集合不相交，相交则不合并。
	      iii.find(x): 找到x所在集合的代表，用于判断两个元素是否在同一集合。
# Python
def init(p): 
	# for i = 0 .. n: p[i] = i; 
	p = [i for i in range(n)]
def union(self, p, i, j): 
	p1 = self.parent(p, i) 
	p2 = self.parent(p, j) 
	p[p1] = p2
def parent(self, p, i): 
	root = i 
	while p[root] != root: 
		root = p[root] 
	while p[i] != i: # 路径压缩 ?
		x = i; i = p[i]; p[x] = root 
	return root
// Java
class UnionFind { 
	private int count = 0; 
	private int[] parent; 
	public UnionFind(int n) { 
		count = n; 
		parent = new int[n]; 
		for (int i = 0; i < n; i++) { 
			parent[i] = i;
		}
	} 
	public int find(int p) { 
		while (p != parent[p]) { 
			parent[p] = parent[parent[p]]; 
			p = parent[p]; 
		}
		return p; 
	}
	public void union(int p, int q) { 
		int rootP = find(p); 
		int rootQ = find(q); 
		if (rootP == rootQ) return; 
		parent[rootP] = rootQ; 
		count--;
	}
}

7）双向BFS
eg.双向连通图，从a走到l最短要几步？
技术处理： int step = 1;
         while(!beginVisit.isEmpty()&&!endVisit.isEmpty()) {
             if(beginVisit.size()>endVisit.size()) {
                 Set<String> temp = beginVisit;
                 beginVisit = endVisit;
                 endVisit = temp;
             }
//bfs：
   Set<String> nextVisit = new HashSet<String>();
         for(String word:beginVisit) {
             char[] chs = word.toCharArray();
             
             for(int i = 0;i<chs.length;i++) {
                 for(char c = 'a';c <= 'z';c++) {
                     char old = chs[i];
                     chs[i] = c;
                     String target = String.valueOf(chs);
                     
                     if(endVisit.contains(target)) {
                         return step+1;
                     }
                     if(!visit.contains(target)&&wordList.contains(target)) {
                         nextVisit.add(target);
                         visit.add(target);
                    }
                     chs[i] = old;
                 }
             }
         }
             beginVisit = nextVisit;
             step++;
        }
         


9）启发式搜索 (A*算法)
# Python
def AstarSearch(graph, start, end):
	pq = collections.priority_queue() # 优先级 —> 估价函数
	pq.append([start]) 
	visited.add(start)
	while pq: 
		node = pq.pop() # 可添加更多智能
		visited.add(node)
		process(node) 
		nodes = generate_related_nodes(node) 
   unvisited = [node for node in nodes if node not in visited]
		pq.push(unvisited)
//Java
	public class AStar
	{
		public final static int BAR = 1; // 障碍值
		public final static int PATH = 2; // 路径
		public final static int DIRECT_VALUE = 10; // 横竖移动代价
		public final static int OBLIQUE_VALUE = 14; // 斜移动代价
		
		Queue<Node> openList = new PriorityQueue<Node>(); // 优先队列(升序)
		List<Node> closeList = new ArrayList<Node>();
		
		/**
		 * 开始算法
		 */
		public void start(MapInfo mapInfo)
		{
			if(mapInfo==null) return;
			// clean
			openList.clear();
			closeList.clear();
			// 开始搜索
			openList.add(mapInfo.start);
			moveNodes(mapInfo);
		}
		/**
		 * 移动当前结点
		 */
		private void moveNodes(MapInfo mapInfo)
		{
			while (!openList.isEmpty())
			{
				Node current = openList.poll();
				closeList.add(current);
				addNeighborNodeInOpen(mapInfo,current);
				if (isCoordInClose(mapInfo.end.coord))
				{
					drawPath(mapInfo.maps, mapInfo.end);
					break;
				}
			}
		}
		
		/**
		 * 在二维数组中绘制路径
		 */
		private void drawPath(int[][] maps, Node end)
		{
			if(end==null||maps==null) return;
			System.out.println("总代价：" + end.G);
			while (end != null)
			{
				Coord c = end.coord;
				maps[c.y][c.x] = PATH;
				end = end.parent;
			}
		}
		/**
		 * 添加所有邻结点到open表
		 */
		private void addNeighborNodeInOpen(MapInfo mapInfo,Node current)
		{
			int x = current.coord.x;
			int y = current.coord.y;
			// 左
			addNeighborNodeInOpen(mapInfo,current, x - 1, y, DIRECT_VALUE);
			// 上
			addNeighborNodeInOpen(mapInfo,current, x, y - 1, DIRECT_VALUE);
			// 右
			addNeighborNodeInOpen(mapInfo,current, x + 1, y, DIRECT_VALUE);
			// 下
			addNeighborNodeInOpen(mapInfo,current, x, y + 1, DIRECT_VALUE);
			// 左上
			addNeighborNodeInOpen(mapInfo,current, x - 1, y - 1, OBLIQUE_VALUE);
			// 右上
			addNeighborNodeInOpen(mapInfo,current, x + 1, y - 1, OBLIQUE_VALUE);
			// 右下
			addNeighborNodeInOpen(mapInfo,current, x + 1, y + 1, OBLIQUE_VALUE);
			// 左下
			addNeighborNodeInOpen(mapInfo,current, x - 1, y + 1, OBLIQUE_VALUE);
		}
	
		/**
		 * 添加一个邻结点到open表
		 */
		private void addNeighborNodeInOpen(MapInfo mapInfo,Node current, int x, int y, int value)
		{
			if (canAddNodeToOpen(mapInfo,x, y))
			{
				Node end=mapInfo.end;
				Coord coord = new Coord(x, y);
				int G = current.G + value; // 计算邻结点的G值
				Node child = findNodeInOpen(coord);
				if (child == null)
				{
					int H=calcH(end.coord,coord); // 计算H值
					if(isEndNode(end.coord,coord))
					{
						child=end;
						child.parent=current;
						child.G=G;
						child.H=H;
					}
					else
					{
						child = new Node(coord, current, G, H);
					}
					openList.add(child);
				}
				else if (child.G > G)
				{
					child.G = G;
					child.parent = current;
					openList.add(child);
				}
			}
		}
	

		/**
		 * 从Open列表中查找结点
		 */
		private Node findNodeInOpen(Coord coord)
		{
			if (coord == null || openList.isEmpty()) return null;
			for (Node node : openList)
			{
				if (node.coord.equals(coord))
				{
					return node;
				}
			}
			return null;
		}
		/**
		 * 计算H的估值：“曼哈顿”法，坐标分别取差值相加
		 */
		private int calcH(Coord end,Coord coord)
		{
			return Math.abs(end.x - coord.x)
					+ Math.abs(end.y - coord.y);
		}
		
		/**
		 * 判断结点是否是最终结点
		 */
		private boolean isEndNode(Coord end,Coord coord)
		{
			return coord != null && end.equals(coord);
		}
		/**
		 * 判断结点能否放入Open列表
		 */
		private boolean canAddNodeToOpen(MapInfo mapInfo,int x, int y)
		{
			// 是否在地图中
			if (x < 0 || x >= mapInfo.width || y < 0 || y >= mapInfo.hight) return false;
			// 判断是否是不可通过的结点
			if (mapInfo.maps[y][x] == BAR) return false;
			// 判断结点是否存在close表
			if (isCoordInClose(x, y)) return false;
	

			return true;
		}
	
		/**
		 * 判断坐标是否在close表中
		 */
		private boolean isCoordInClose(Coord coord)
		{
			return coord!=null&&isCoordInClose(coord.x, coord.y);
		}
		/**
		 * 判断坐标是否在close表中
		 */
		private boolean isCoordInClose(int x, int y)
		{
			if (closeList.isEmpty()) return false;
			for (Node node : closeList)
			{
				if (node.coord.x == x && node.coord.y == y)
				{
					return true;
				}
			}
			return false;
		}
	}


10）AVL树（二叉平衡树）：当任意项插入删除时，自动使其高度保持较小。
平衡因子balance factor = {-1,0,1}。通过四种旋转操作来平衡。
左左子树->右旋；右右子树->左旋；左右子树->左右旋；右左子树->右左旋。
不足：结点需要额外存储信息，且调整次数频繁。

11）红黑树：一种近似平衡二叉树，它能确保任意结点左右子树的高度差小于两倍。
满足条件：
i. 每个节点要么是红色要么是黑色。
ii. 根节点是黑色。
iii. 每个叶子节点（空节点）是黑色。
iv. 不能有相邻接的两个红色节点。
v. 从任一节点到其每个叶子结点的所有路径都包含相同数目的黑结点。

对比：AVL比红黑树提供更快地查询；
	红黑树提供更快的插入删除操作；
AVL每个结点有factors和heights,需要更多内存。
红黑树对额外空间的消耗更少。
写得多读的少用红黑树，Map，Set都是红黑树。读的多写的少用二叉平衡树，DB是AVL。


工程实现：
1）布隆过滤器

2）LRUCache

位运算:
1)左移：<<  eg.0011->0110
2)右移：>>  eg.0110->0011
3)或：|  
4)与：&
5)取反：~
6)异或：^  (相同为0，不同为1，也可以理解为不进位的加法)
常用操作：
	i. 将x最右边的n位清零：x&(~0<<n)
	ii. 获取x的第n位值（0或1）：(x>>n)&1
	iii.获取x的第n位的幂值：x&(1<<n)
	iv. 仅将第n位置为1：x|(1<<n)
v. 仅将第n位置为0：x&(~(1<<n))
vi. 将x最高位至第n位清零：x&((1<<n)-1)
vii.判断奇偶：
	x%2==1——>(x&1)==1
	x%2==0——>(x&1)==0
viii.除2: 
	x = x/2 ——>x = x>>1; mid = (left+right)>>1;
ix.清零最低位的1: x=x&(x-1)
x. x&-x => 得到最低位的1;
xi. x&~x => 0


排序：
